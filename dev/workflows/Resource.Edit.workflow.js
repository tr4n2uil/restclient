/** *	@workflow ResourceEdit *	@desc edits resource fields using PUT * *	@param type string [memory] *	@param sel string [memory] *	@param id integer [memory] *	@param field string [memory]  * *	@param ld string [memory] optional default FireSpark.core.constant.loadmsg *	@param anm string [memory] optional default 'fadein' ('fadein', 'fadeout', 'slidein', 'slideout') *	@param dur integer [memory] optional default 1000 *	@param dly integer [memory] optional default 0 * *	@param cf boolean [memory] optional default false *	@param cfmsg string [memory] optional default 'Are you sure you want to continue ?' ***/RESTClient.jquery.workflow.ResourceEdit = {	input : function(){		return {			required : ['type', 'sel', 'id', 'field'],			optional : { 				error : 'p',				ld : FireSpark.core.constant.loadmsg,				anm : 'fadein',				dur : 1000,				dly : 0, 				cf : false,				cfmsg : 'Are you sure you want to continue ?'			}		};	},		run : function($memory){		return FireSpark.Kernel.execute([{			service : FireSpark.jquery.service.FormValidate,			form : $memory['sel'] + ' form'		},{			service : FireSpark.jquery.service.FormRead,			form : $memory['sel'] + ' form'		},{			service : RESTClient.jquery.service.ResourceRESTURL,			rsrctype : $memory['type'],			rsrcid : $memory['id'],			rsrcfield : $memory['field']		},{			service : RESTClient.jquery.service.SessionRESTURL		},{			service : FireSpark.jquery.workflow.LoadTemplate,			input : { 				confirm : 'cf', 				confirmmsg : 'cfmsg',				loaddata : 'ld', 				animation : 'anm',				duration : 'dur',				delay : 'dly'			},			element : $memory['sel'] +' span.status',			select : true,			encode : 'json',			type : 'text',			selector : $memory['sel'] + ' input[name=submit]',			request : 'PUT',			workflowend : { 				service : FireSpark.jquery.service.ElementContent, 				data : RESTClient.jquery.constant.successimg 			},			errorflowend : {				service : FireSpark.jquery.service.ElementContent,				data : RESTClient.jquery.constant.errorimg			}		}], $memory);	},		output : function(){		return [];	}};